services:
  web:
    container_name: web
    build:
      context: .
      dockerfile: ./apps/web/Dockerfile
    restart: always
    ports:
      - 3000:3000
    networks:
      - my_network

  api:
    container_name: api
    build:
      context: .
      dockerfile: ./apps/api/Dockerfile
    restart: always
    ports:
      - 5001:5001
    networks:
      - my_network
    depends_on:
      - mongo
      - mongo-express
      - redis
      - rabbitmq

  mongo:
    image: mongo:8.0.1
    restart: always
    container_name: mongo
    hostname: mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_DATABASE: weather
    ports:
      - 27017:27017
    volumes:
      - mongo_data:/data/db
    networks:
      - my_network

  mongo-express:
    image: mongo-express:latest
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo:27017/weather?authSource=admin
      # ME_CONFIG_BASICAUTH: false
    networks:
      - my_network
    depends_on:
      - mongo

  redis:
    image: redis:7.4.1-alpine
    restart: always
    ports:
      - 6379:6379
    volumes:
      - redis_data:/data
    command: redis-server --save 20 1 --loglevel warning --requirepass eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81
    networks:
      - my_network

  rabbitmq:
    image: rabbitmq:4-management
    container_name: rabbitmq
    ports:
      - "5672:5672" # RabbitMQ default port
      - "15672:15672" # RabbitMQ management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: password
    networks:
      - my_network

volumes:
  redis_data:
  mongo_data:
  rabbitmq_data:

networks:
  my_network:
